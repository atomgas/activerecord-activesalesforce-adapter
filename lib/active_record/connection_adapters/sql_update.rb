# Autogenerated from a Treetop grammar. Edits may be lost.


module SqlUpdate
  include Treetop::Runtime

  def root
    @root || :parts
  end

  def _nt_parts
    start_index = index
    if node_cache[:parts].has_key?(index)
      cached = node_cache[:parts][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    r1 = _nt_update_statement
    if r1
      r0 = r1
    else
      r2 = _nt_simple_where_clause
      if r2
        r0 = r2
      else
        r3 = _nt_assignment_list
        if r3
          r0 = r3
        else
          r4 = _nt_assignment
          if r4
            r0 = r4
          else
            r5 = _nt_quoted_string
            if r5
              r0 = r5
            else
              r6 = _nt_text
              if r6
                r0 = r6
              else
                r7 = _nt_identifier
                if r7
                  r0 = r7
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:parts][start_index] = r0

    r0
  end

  module UpdateStatement0
    def space1
      elements[1]
    end

    def identifier
      elements[2]
    end

    def space2
      elements[3]
    end

    def space3
      elements[5]
    end

    def assignment_list
      elements[6]
    end

    def space4
      elements[7]
    end

    def simple_where_clause
      elements[8]
    end
  end

  module UpdateStatement1
    def table_name
      identifier.text_value
    end
    def id
      simple_where_clause.id
    end
    def items
      assignment_list.items
    end
  end

  def _nt_update_statement
    start_index = index
    if node_cache[:update_statement].has_key?(index)
      cached = node_cache[:update_statement][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("UPDATE", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure("UPDATE")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_identifier
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            if has_terminal?("SET", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure("SET")
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_space
              s0 << r6
              if r6
                r7 = _nt_assignment_list
                s0 << r7
                if r7
                  r8 = _nt_space
                  s0 << r8
                  if r8
                    r9 = _nt_simple_where_clause
                    s0 << r9
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UpdateStatement0)
      r0.extend(UpdateStatement1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:update_statement][start_index] = r0

    r0
  end

  module SimpleWhereClause0
    def space1
      elements[1]
    end

    def identifier
      elements[2]
    end

    def space2
      elements[3]
    end

    def space3
      elements[5]
    end

    def quoted_string
      elements[6]
    end
  end

  module SimpleWhereClause1
    def id
      quoted_string.text_value
    end
  end

  def _nt_simple_where_clause
    start_index = index
    if node_cache[:simple_where_clause].has_key?(index)
      cached = node_cache[:simple_where_clause][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("WHERE", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure("WHERE")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_identifier
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            if has_terminal?("=", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("=")
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_space
              s0 << r6
              if r6
                r7 = _nt_quoted_string
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SimpleWhereClause0)
      r0.extend(SimpleWhereClause1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:simple_where_clause][start_index] = r0

    r0
  end

  module AssignmentList0
    def a1
      elements[0]
    end

    def space1
      elements[1]
    end

    def space2
      elements[3]
    end

    def a2
      elements[4]
    end
  end

  module AssignmentList1
    def items
      a1.items.merge(a2.items)
    end
  end

  def _nt_assignment_list
    start_index = index
    if node_cache[:assignment_list].has_key?(index)
      cached = node_cache[:assignment_list][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_assignment
    s1 << r2
    if r2
      r3 = _nt_space
      s1 << r3
      if r3
        if has_terminal?(",", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(",")
          r4 = nil
        end
        s1 << r4
        if r4
          r5 = _nt_space
          s1 << r5
          if r5
            r6 = _nt_assignment_list
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(AssignmentList0)
      r1.extend(AssignmentList1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r7 = _nt_assignment
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:assignment_list][start_index] = r0

    r0
  end

  module Assignment0
    def identifier
      elements[0]
    end

    def space1
      elements[1]
    end

    def space2
      elements[3]
    end

    def quoted_string
      elements[4]
    end
  end

  module Assignment1

    def items
      { key => value }
    end

    def key
      identifier.text_value
    end

    def value
      quoted_string.text_value
    end
  end

  def _nt_assignment
    start_index = index
    if node_cache[:assignment].has_key?(index)
      cached = node_cache[:assignment][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if has_terminal?("=", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("=")
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            r5 = _nt_quoted_string
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Assignment0)
      r0.extend(Assignment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:assignment][start_index] = r0

    r0
  end

  module QuotedString0
    def text
      elements[1]
    end

  end

  module QuotedString1
    def text_value
      text.text_value
    end
  end

  module QuotedString2
    def text_value
      ""
    end
  end

  def _nt_quoted_string
    start_index = index
    if node_cache[:quoted_string].has_key?(index)
      cached = node_cache[:quoted_string][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?("'", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("'")
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_text
      s1 << r3
      if r3
        if has_terminal?("'", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(QuotedString0)
      r1.extend(QuotedString1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("''", false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
        r5.extend(QuotedString2)
        @index += 2
      else
        terminal_parse_failure("''")
        r5 = nil
      end
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:quoted_string][start_index] = r0

    r0
  end

  module Text0
  end

  def _nt_text
    start_index = index
    if node_cache[:text].has_key?(index)
      cached = node_cache[:text][index]
      @index = cached.interval.end if cached
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?("''", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("''")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        i3, s3 = index, []
        i4 = index
        if has_terminal?("'", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Text0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:text][start_index] = r0

    r0
  end

  module Identifier0
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      @index = cached.interval.end if cached
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      i3 = index
      if has_terminal?("'", false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("'")
        r4 = nil
      end
      if r4
        r3 = r4
      else
        if has_terminal?("=", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("=")
          r5 = nil
        end
        if r5
          r3 = r5
        else
          if has_terminal?(" ", false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(" ")
            r6 = nil
          end
          if r6
            r3 = r6
          else
            @index = i3
            r3 = nil
          end
        end
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if index < input_length
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("any character")
          r7 = nil
        end
        s1 << r7
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Identifier0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      @index = cached.interval.end if cached
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(' ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(' ')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:space][start_index] = r0

    r0
  end

end

class SqlUpdateParser < Treetop::Runtime::CompiledParser
  include SqlUpdate
end

